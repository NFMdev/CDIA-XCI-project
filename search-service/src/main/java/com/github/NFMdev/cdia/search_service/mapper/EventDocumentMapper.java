package com.github.NFMdev.cdia.search_service.mapper;

import com.github.NFMdev.cdia.ingestion_service.model.anomaly.AnomalyEntity;
import com.github.NFMdev.cdia.ingestion_service.model.event.EventEntity;
import com.github.NFMdev.cdia.ingestion_service.model.event.EventImageEntity;
import com.github.NFMdev.cdia.ingestion_service.model.event.EventMetadataEntity;
import com.github.NFMdev.cdia.search_service.model.EventDocument;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.Named;
import org.mapstruct.factory.Mappers;

import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

@Mapper(componentModel = "spring")
public interface EventDocumentMapper {
    EventDocumentMapper INSTANCE = Mappers.getMapper(EventDocumentMapper.class);

    @Mapping(target = "id", expression = "java(entity.getId() != null ? entity.getId().toString() : null)")
    @Mapping(target = "sourceSystem", expression = "java(entity.getSourceSystem() != null ? entity.getSourceSystem().getName() : null)")
    @Mapping(target = "imageUrls", source = "images", qualifiedByName = "mapImages")
    @Mapping(target = "metadata", source = "metadata", qualifiedByName = "mapMetadata")
    @Mapping(target = "anomalies", source = "anomalies", qualifiedByName = "mapAnomalies")
    EventDocument toDocument(EventEntity entity);

    @Named("mapImages")
    default List<String> mapImages(List<EventImageEntity> images) {
        if (images == null) return null;
        return images.stream()
                .map(EventImageEntity::getUrl)
                .toList();
    }

    @Named("mapMetadata")
    default Map<String, Object> mapMetadata(Set<EventMetadataEntity> metadata) {
        if (metadata == null) return null;
        return metadata.stream()
                .filter(m -> m.getKey() != null)
                .collect(Collectors.toMap(
                        EventMetadataEntity::getKey,
                        EventMetadataEntity::getValue,
                        (a, b) -> b
                ));
    }

    @Named("mapAnomalies")
    default List<String> mapAnomalies(Set<AnomalyEntity> anomalies) {
        if (anomalies == null) return null;
        return anomalies.stream()
                .map(a -> a.getLabel().getDescription())
                .toList();
    }

    @Mapping(target = "id", ignore = true) // ID generated by DB
    @Mapping(target = "sourceSystem", ignore = true) // set manually
    @Mapping(target = "images", ignore = true) // requires separate handling
    @Mapping(target = "metadata", ignore = true)
    @Mapping(target = "anomalies", ignore = true)
    EventEntity toEntity(EventDocument document);
}
